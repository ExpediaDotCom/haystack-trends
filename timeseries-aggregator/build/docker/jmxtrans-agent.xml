<jmxtrans-agent>
    <queries>

        <!-- JVM -->
        <query objectName="java.lang:type=Memory" attribute="HeapMemoryUsage" key="used"
               resultAlias="jvm.heapMemoryUsage.used"/>
        <query objectName="java.lang:type=Memory" attribute="HeapMemoryUsage" key="committed"
               resultAlias="jvm.heapMemoryUsage.committed"/>
        <query objectName="java.lang:type=Memory" attribute="NonHeapMemoryUsage" key="used"
               resultAlias="jvm.nonHeapMemoryUsage.used"/>
        <query objectName="java.lang:type=Memory" attribute="NonHeapMemoryUsage" key="committed"
               resultAlias="jvm.nonHeapMemoryUsage.committed"/>
        <query objectName="java.lang:type=GarbageCollector,name=ParNew" resultAlias="gc.young.#attribute#"/>
        <query objectName="java.lang:type=GarbageCollector,name=ConcurrentMarkSweep" resultAlias="gc.old.#attribute#"/>
        <query objectName="java.lang:type=ClassLoading" attribute="LoadedClassCount" resultAlias="jvm.loadedClasses"/>
        <query objectName="java.lang:type=Threading" attribute="ThreadCount" resultAlias="jvm.thread"/>

        <!-- kafka producer metrics -->
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="record-send-rate"
               resultAlias="kafka-producer.record-send.rate"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="buffer-exhausted-rate"
               resultAlias="kafka-producer.buffer-exhausted.rate"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="record-retry-rate"
               resultAlias="kafka-producer.record-retry.rate"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="produce-throttle-time-avg"
               resultAlias="kafka-producer.produce-throttle-time.avg"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="request-latency-avg"
               resultAlias="kafka-producer.request-latency.avg"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="buffer-available-bytes"
               resultAlias="kafka-producer.buffer-bytes.available"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="buffer-total-bytes"
               resultAlias="kafka-producer.buffer-bytes.total"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="request-size-max"
               resultAlias="kafka-producer.request-size.max"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="request-rate"
               resultAlias="kafka-producer.request.rate"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="response-rate"
               resultAlias="kafka-producer.response.rate"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="record-error-rate"
               resultAlias="kafka-producer.record-error.rate"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="requests-in-flight"
               resultAlias="kafka-producer.request-in-flight.count"/>
        <query objectName="kafka.producer:type=producer-metrics,client-id=*" attribute="batch-size-avg"
               resultAlias="kafka-producer.batch-size.avg"/>

        <!-- kafka consumer metrics -->
        <query objectName="kafka.consumer:type=consumer-metrics,client-id=*" attribute="request-rate"
               resultAlias="kafka-consumer.request.rate"/>
        <query objectName="kafka.consumer:type=consumer-metrics,client-id=*" attribute="response-rate"
               resultAlias="kafka-consumer.response.rate"/>
        <query objectName="kafka.consumer:type=consumer-metrics,client-id=*" attribute="incoming-byte-rate"
               resultAlias="kafka-consumer.incoming-byte.rate"/>
        <query objectName="kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*" attribute="records-lag-max"
               resultAlias="kafka-consumer.records-lag.max"/>
        <query objectName="kafka.consumer:type=consumer-fetch-manager-metrics,client-id=*"
               attribute="records-consumed-rate" resultAlias="kafka-consumer.records-consumed.rate"/>

        <!-- kafka streams mbeans -->
        <query objectName="kafka.streams:type=stream-metrics,client-id=*" attribute="poll-rate"
               resultAlias="kstreams.poll.rate"/>
        <query objectName="kafka.streams:type=stream-metrics,client-id=*" attribute="commit-rate"
               resultAlias="kstreams.commit.rate"/>
        <query objectName="kafka.streams:type=stream-metrics,client-id=*" attribute="punctuate-rate"
               resultAlias="kstreams.punctuate.rate"/>
        <query objectName="kafka.streams:type=stream-metrics,client-id=*" attribute="process-rate"
               resultAlias="kstreams.process.rate"/>
        <query objectName="kafka.streams:type=stream-metrics,client-id=*" attribute="process-latency-avg"
               resultAlias="kstreams.process.latency_avg"/>
        <query objectName="kafka.streams:type=stream-metrics,client-id=*" attribute="process-latency-max"
               resultAlias="kstreams.process.latency_max"/>

        <query objectName="kafka.streams:type=stream-in-memory-lru-state-metrics,client-id=*"
               resultAlias="kstreams.process.lru_state_metrics.#attribute#"/>


        <!-- service mbeans -->
        <query objectName="metrics:name=metricpoint.deser.failure" attributes="OneMinuteRate,MeanRate"
               resultAlias="metricpoint.deser.failure.#attribute#"/>
        <query objectName="metrics:name=metricpoint.ser.failure" attributes="OneMinuteRate,MeanRate"
               resultAlias="metricpoint.ser.failure.#attribute#"/>
        <query objectName="metrics:name=metricpoint.ser.success" attributes="OneMinuteRate,MeanRate"
               resultAlias="metricpoint.ser.success.#attribute#"/>
        <query objectName="metrics:name=metricpoints.disordered" attributes="OneMinuteRate,MeanRate"
               resultAlias="metricpoint.disordered.#attribute#"/>
        <query objectName="metrics:name=metricpoints.compute.failure" attributes="OneMinuteRate,MeanRate"
               resultAlias="metricpoint.compute.failure.#attribute#"/>
        <query objectName="metrics:name=metricpoints.invalid" attributes="OneMinuteRate,MeanRate"
               resultAlias="metricpoint.invalid.#attribute#"/>
        <query objectName="metrics:name=metricpoint.kafka-external.success" attributes="OneMinuteRate,MeanRate"
               resultAlias="metricpoint.kafka-external.success.#attribute#"/>
        <query objectName="metrics:name=metricpoint.kafka-external.failure" attributes="OneMinuteRate,MeanRate"
               resultAlias="metricpoint.kafka-external.failure.#attribute#"/>

        <query objectName="metrics:name=trendmetric.deser.failure" attributes="OneMinuteRate,MeanRate"
               resultAlias="trend-metric.deser.failure.#attribute#"/>
        <query objectName="metrics:name=trendmetric.ser.success" attributes="OneMinuteRate,MeanRate"
               resultAlias="trend-metric.ser.success.#attribute#"/>
        <query objectName="metrics:name=trendmetric.deser.success" attributes="OneMinuteRate,MeanRate"
               resultAlias="trend-metric.deser.success.#attribute#"/>
        <query objectName="metrics:name=trendmetric.compute.time"
               attributes="50thPercentile,99thPercentile,OneMinuteRate"
               resultAlias="trend-metric.compute.time.#attribute#"/>

        <query objectName="metrics:name=histogram.metric.compute.time"
               attributes="50thPercentile,99thPercentile,OneMinuteRate"
               resultAlias="histogram-metric.compute.time.#attribute#"/>

        <query objectName="metrics:name=count.metric.compute.time"
               attributes="50thPercentile,99thPercentile,OneMinuteRate"
               resultAlias="count-metric.compute.time.#attribute#"/>

        <query objectName="metrics:name=metricprocessor.trendcount"
               resultAlias="metricprocessor.trendcount.#attribute#"/>

    </queries>
    <outputWriter class="org.jmxtrans.agent.GraphitePlainTextTcpOutputWriter">
        <host>${HAYSTACK_GRAPHITE_HOST:monitoring-influxdb-graphite.kube-system.svc}</host>
        <port>${HAYSTACK_GRAPHITE_PORT:2003}</port>
        <namePrefix>haystack.trends.timeseries-aggregator.#hostname#.</namePrefix>
    </outputWriter>
    <collectIntervalInSeconds>30</collectIntervalInSeconds>
</jmxtrans-agent>
